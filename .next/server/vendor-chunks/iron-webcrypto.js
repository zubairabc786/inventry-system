"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/iron-webcrypto";
exports.ids = ["vendor-chunks/iron-webcrypto"];
exports.modules = {

/***/ "(action-browser)/./node_modules/iron-webcrypto/dist/index.js":
/*!***************************************************!*\
  !*** ./node_modules/iron-webcrypto/dist/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   algorithms: () => (/* binding */ algorithms),\n/* harmony export */   base64urlDecode: () => (/* binding */ base64urlDecode),\n/* harmony export */   base64urlEncode: () => (/* binding */ base64urlEncode),\n/* harmony export */   bufferToString: () => (/* binding */ bufferToString),\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   decrypt: () => (/* binding */ decrypt),\n/* harmony export */   defaults: () => (/* binding */ defaults),\n/* harmony export */   encrypt: () => (/* binding */ encrypt),\n/* harmony export */   generateKey: () => (/* binding */ generateKey),\n/* harmony export */   hmacWithPassword: () => (/* binding */ hmacWithPassword),\n/* harmony export */   macFormatVersion: () => (/* binding */ macFormatVersion),\n/* harmony export */   macPrefix: () => (/* binding */ macPrefix),\n/* harmony export */   randomBits: () => (/* binding */ randomBits),\n/* harmony export */   seal: () => (/* binding */ seal),\n/* harmony export */   stringToBuffer: () => (/* binding */ stringToBuffer),\n/* harmony export */   unseal: () => (/* binding */ unseal)\n/* harmony export */ });\n// src/utils.ts\nvar alphabetByEncoding = {};\nvar alphabetByValue = Array.from({\n    length: 64\n});\nfor(let i = 0, start = \"A\".charCodeAt(0), limit = \"Z\".charCodeAt(0); i + start <= limit; i++){\n    const char = String.fromCharCode(i + start);\n    alphabetByEncoding[char] = i;\n    alphabetByValue[i] = char;\n}\nfor(let i = 0, start = \"a\".charCodeAt(0), limit = \"z\".charCodeAt(0); i + start <= limit; i++){\n    const char = String.fromCharCode(i + start);\n    const index = i + 26;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nfor(let i = 0; i < 10; i++){\n    alphabetByEncoding[i.toString(10)] = i + 52;\n    const char = i.toString(10);\n    const index = i + 52;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nalphabetByEncoding[\"-\"] = 62;\nalphabetByValue[62] = \"-\";\nalphabetByEncoding[\"_\"] = 63;\nalphabetByValue[63] = \"_\";\nvar bitsPerLetter = 6;\nvar bitsPerByte = 8;\nvar maxLetterValue = 63;\nvar stringToBuffer = (value)=>{\n    return new TextEncoder().encode(value);\n};\nvar bufferToString = (value)=>{\n    return new TextDecoder().decode(value);\n};\nvar base64urlDecode = (_input)=>{\n    const input = _input + \"=\".repeat((4 - _input.length % 4) % 4);\n    let totalByteLength = input.length / 4 * 3;\n    if (input.endsWith(\"==\")) {\n        totalByteLength -= 2;\n    } else if (input.endsWith(\"=\")) {\n        totalByteLength--;\n    }\n    const out = new ArrayBuffer(totalByteLength);\n    const dataView = new DataView(out);\n    for(let i = 0; i < input.length; i += 4){\n        let bits = 0;\n        let bitLength = 0;\n        for(let j = i, limit = i + 3; j <= limit; j++){\n            if (input[j] === \"=\") {\n                bits >>= bitsPerLetter;\n            } else {\n                if (!(input[j] in alphabetByEncoding)) {\n                    throw new TypeError(`Invalid character ${input[j]} in base64 string.`);\n                }\n                bits |= alphabetByEncoding[input[j]] << (limit - j) * bitsPerLetter;\n                bitLength += bitsPerLetter;\n            }\n        }\n        const chunkOffset = i / 4 * 3;\n        bits >>= bitLength % bitsPerByte;\n        const byteLength = Math.floor(bitLength / bitsPerByte);\n        for(let k = 0; k < byteLength; k++){\n            const offset = (byteLength - k - 1) * bitsPerByte;\n            dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);\n        }\n    }\n    return new Uint8Array(out);\n};\nvar base64urlEncode = (_input)=>{\n    const input = typeof _input === \"string\" ? stringToBuffer(_input) : _input;\n    let str = \"\";\n    for(let i = 0; i < input.length; i += 3){\n        let bits = 0;\n        let bitLength = 0;\n        for(let j = i, limit = Math.min(i + 3, input.length); j < limit; j++){\n            bits |= input[j] << (limit - j - 1) * bitsPerByte;\n            bitLength += bitsPerByte;\n        }\n        const bitClusterCount = Math.ceil(bitLength / bitsPerLetter);\n        bits <<= bitClusterCount * bitsPerLetter - bitLength;\n        for(let k = 1; k <= bitClusterCount; k++){\n            const offset = (bitClusterCount - k) * bitsPerLetter;\n            str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];\n        }\n    }\n    return str;\n};\n// src/index.ts\nvar defaults = {\n    encryption: {\n        saltBits: 256,\n        algorithm: \"aes-256-cbc\",\n        iterations: 1,\n        minPasswordlength: 32\n    },\n    integrity: {\n        saltBits: 256,\n        algorithm: \"sha256\",\n        iterations: 1,\n        minPasswordlength: 32\n    },\n    ttl: 0,\n    timestampSkewSec: 60,\n    localtimeOffsetMsec: 0\n};\nvar clone = (options)=>({\n        ...options,\n        encryption: {\n            ...options.encryption\n        },\n        integrity: {\n            ...options.integrity\n        }\n    });\nvar algorithms = {\n    \"aes-128-ctr\": {\n        keyBits: 128,\n        ivBits: 128,\n        name: \"AES-CTR\"\n    },\n    \"aes-256-cbc\": {\n        keyBits: 256,\n        ivBits: 128,\n        name: \"AES-CBC\"\n    },\n    sha256: {\n        keyBits: 256,\n        name: \"SHA-256\"\n    }\n};\nvar macFormatVersion = \"2\";\nvar macPrefix = \"Fe26.2\";\nvar randomBytes = (_crypto, size)=>{\n    const bytes = new Uint8Array(size);\n    _crypto.getRandomValues(bytes);\n    return bytes;\n};\nvar randomBits = (_crypto, bits)=>{\n    if (bits < 1) throw new Error(\"Invalid random bits count\");\n    const bytes = Math.ceil(bits / 8);\n    return randomBytes(_crypto, bytes);\n};\nvar pbkdf2 = async (_crypto, password, salt, iterations, keyLength, hash)=>{\n    const passwordBuffer = stringToBuffer(password);\n    const importedKey = await _crypto.subtle.importKey(\"raw\", passwordBuffer, {\n        name: \"PBKDF2\"\n    }, false, [\n        \"deriveBits\"\n    ]);\n    const saltBuffer = stringToBuffer(salt);\n    const params = {\n        name: \"PBKDF2\",\n        hash,\n        salt: saltBuffer,\n        iterations\n    };\n    const derivation = await _crypto.subtle.deriveBits(params, importedKey, keyLength * 8);\n    return derivation;\n};\nvar generateKey = async (_crypto, password, options)=>{\n    var _a;\n    if (!(password == null ? void 0 : password.length)) throw new Error(\"Empty password\");\n    if (options == null || typeof options !== \"object\") throw new Error(\"Bad options\");\n    if (!(options.algorithm in algorithms)) throw new Error(`Unknown algorithm: ${options.algorithm}`);\n    const algorithm = algorithms[options.algorithm];\n    const result = {};\n    const hmac = (_a = options.hmac) != null ? _a : false;\n    const id = hmac ? {\n        name: \"HMAC\",\n        hash: algorithm.name\n    } : {\n        name: algorithm.name\n    };\n    const usage = hmac ? [\n        \"sign\",\n        \"verify\"\n    ] : [\n        \"encrypt\",\n        \"decrypt\"\n    ];\n    if (typeof password === \"string\") {\n        if (password.length < options.minPasswordlength) throw new Error(`Password string too short (min ${options.minPasswordlength} characters required)`);\n        let { salt = \"\" } = options;\n        if (!salt) {\n            const { saltBits = 0 } = options;\n            if (!saltBits) throw new Error(\"Missing salt and saltBits options\");\n            const randomSalt = randomBits(_crypto, saltBits);\n            salt = [\n                ...new Uint8Array(randomSalt)\n            ].map((x)=>x.toString(16).padStart(2, \"0\")).join(\"\");\n        }\n        const derivedKey = await pbkdf2(_crypto, password, salt, options.iterations, algorithm.keyBits / 8, \"SHA-1\");\n        const importedEncryptionKey = await _crypto.subtle.importKey(\"raw\", derivedKey, id, false, usage);\n        result.key = importedEncryptionKey;\n        result.salt = salt;\n    } else {\n        if (password.length < algorithm.keyBits / 8) throw new Error(\"Key buffer (password) too small\");\n        result.key = await _crypto.subtle.importKey(\"raw\", password, id, false, usage);\n        result.salt = \"\";\n    }\n    if (options.iv) result.iv = options.iv;\n    else if (\"ivBits\" in algorithm) result.iv = randomBits(_crypto, algorithm.ivBits);\n    return result;\n};\nvar getEncryptParams = (algorithm, key, data)=>{\n    return [\n        algorithm === \"aes-128-ctr\" ? {\n            name: \"AES-CTR\",\n            counter: key.iv,\n            length: 128\n        } : {\n            name: \"AES-CBC\",\n            iv: key.iv\n        },\n        key.key,\n        typeof data === \"string\" ? stringToBuffer(data) : data\n    ];\n};\nvar encrypt = async (_crypto, password, options, data)=>{\n    const key = await generateKey(_crypto, password, options);\n    const encrypted = await _crypto.subtle.encrypt(...getEncryptParams(options.algorithm, key, data));\n    return {\n        encrypted: new Uint8Array(encrypted),\n        key\n    };\n};\nvar decrypt = async (_crypto, password, options, data)=>{\n    const key = await generateKey(_crypto, password, options);\n    const decrypted = await _crypto.subtle.decrypt(...getEncryptParams(options.algorithm, key, data));\n    return bufferToString(new Uint8Array(decrypted));\n};\nvar hmacWithPassword = async (_crypto, password, options, data)=>{\n    const key = await generateKey(_crypto, password, {\n        ...options,\n        hmac: true\n    });\n    const textBuffer = stringToBuffer(data);\n    const signed = await _crypto.subtle.sign({\n        name: \"HMAC\"\n    }, key.key, textBuffer);\n    const digest = base64urlEncode(new Uint8Array(signed));\n    return {\n        digest,\n        salt: key.salt\n    };\n};\nvar normalizePassword = (password)=>{\n    if (typeof password === \"string\" || password instanceof Uint8Array) return {\n        encryption: password,\n        integrity: password\n    };\n    if (\"secret\" in password) return {\n        id: password.id,\n        encryption: password.secret,\n        integrity: password.secret\n    };\n    return {\n        id: password.id,\n        encryption: password.encryption,\n        integrity: password.integrity\n    };\n};\nvar seal = async (_crypto, object, password, options)=>{\n    if (!password) throw new Error(\"Empty password\");\n    const opts = clone(options);\n    const now = Date.now() + (opts.localtimeOffsetMsec || 0);\n    const objectString = JSON.stringify(object);\n    const pass = normalizePassword(password);\n    const { id = \"\", encryption, integrity } = pass;\n    if (id && !/^\\w+$/.test(id)) throw new Error(\"Invalid password id\");\n    const { encrypted, key } = await encrypt(_crypto, encryption, opts.encryption, objectString);\n    const encryptedB64 = base64urlEncode(new Uint8Array(encrypted));\n    const iv = base64urlEncode(key.iv);\n    const expiration = opts.ttl ? now + opts.ttl : \"\";\n    const macBaseString = `${macPrefix}*${id}*${key.salt}*${iv}*${encryptedB64}*${expiration}`;\n    const mac = await hmacWithPassword(_crypto, integrity, opts.integrity, macBaseString);\n    const sealed = `${macBaseString}*${mac.salt}*${mac.digest}`;\n    return sealed;\n};\nvar fixedTimeComparison = (a, b)=>{\n    let mismatch = a.length === b.length ? 0 : 1;\n    if (mismatch) b = a;\n    for(let i = 0; i < a.length; i += 1)mismatch |= a.charCodeAt(i) ^ b.charCodeAt(i);\n    return mismatch === 0;\n};\nvar unseal = async (_crypto, sealed, password, options)=>{\n    if (!password) throw new Error(\"Empty password\");\n    const opts = clone(options);\n    const now = Date.now() + (opts.localtimeOffsetMsec || 0);\n    const parts = sealed.split(\"*\");\n    if (parts.length !== 8) throw new Error(\"Incorrect number of sealed components\");\n    const prefix = parts[0];\n    let passwordId = parts[1];\n    const encryptionSalt = parts[2];\n    const encryptionIv = parts[3];\n    const encryptedB64 = parts[4];\n    const expiration = parts[5];\n    const hmacSalt = parts[6];\n    const hmac = parts[7];\n    const macBaseString = `${prefix}*${passwordId}*${encryptionSalt}*${encryptionIv}*${encryptedB64}*${expiration}`;\n    if (macPrefix !== prefix) throw new Error(\"Wrong mac prefix\");\n    if (expiration) {\n        if (!/^\\d+$/.test(expiration)) throw new Error(\"Invalid expiration\");\n        const exp = Number.parseInt(expiration, 10);\n        if (exp <= now - opts.timestampSkewSec * 1e3) throw new Error(\"Expired seal\");\n    }\n    let pass = \"\";\n    passwordId = passwordId || \"default\";\n    if (typeof password === \"string\" || password instanceof Uint8Array) pass = password;\n    else if (passwordId in password) {\n        pass = password[passwordId];\n    } else {\n        throw new Error(`Cannot find password: ${passwordId}`);\n    }\n    pass = normalizePassword(pass);\n    const macOptions = opts.integrity;\n    macOptions.salt = hmacSalt;\n    const mac = await hmacWithPassword(_crypto, pass.integrity, macOptions, macBaseString);\n    if (!fixedTimeComparison(mac.digest, hmac)) throw new Error(\"Bad hmac value\");\n    const encrypted = base64urlDecode(encryptedB64);\n    const decryptOptions = opts.encryption;\n    decryptOptions.salt = encryptionSalt;\n    decryptOptions.iv = base64urlDecode(encryptionIv);\n    const decrypted = await decrypt(_crypto, pass.encryption, decryptOptions, encrypted);\n    if (decrypted) return JSON.parse(decrypted);\n    return null;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/iron-webcrypto/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/iron-webcrypto/dist/index.js":
/*!***************************************************!*\
  !*** ./node_modules/iron-webcrypto/dist/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   algorithms: () => (/* binding */ algorithms),\n/* harmony export */   base64urlDecode: () => (/* binding */ base64urlDecode),\n/* harmony export */   base64urlEncode: () => (/* binding */ base64urlEncode),\n/* harmony export */   bufferToString: () => (/* binding */ bufferToString),\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   decrypt: () => (/* binding */ decrypt),\n/* harmony export */   defaults: () => (/* binding */ defaults),\n/* harmony export */   encrypt: () => (/* binding */ encrypt),\n/* harmony export */   generateKey: () => (/* binding */ generateKey),\n/* harmony export */   hmacWithPassword: () => (/* binding */ hmacWithPassword),\n/* harmony export */   macFormatVersion: () => (/* binding */ macFormatVersion),\n/* harmony export */   macPrefix: () => (/* binding */ macPrefix),\n/* harmony export */   randomBits: () => (/* binding */ randomBits),\n/* harmony export */   seal: () => (/* binding */ seal),\n/* harmony export */   stringToBuffer: () => (/* binding */ stringToBuffer),\n/* harmony export */   unseal: () => (/* binding */ unseal)\n/* harmony export */ });\n// src/utils.ts\nvar alphabetByEncoding = {};\nvar alphabetByValue = Array.from({\n    length: 64\n});\nfor(let i = 0, start = \"A\".charCodeAt(0), limit = \"Z\".charCodeAt(0); i + start <= limit; i++){\n    const char = String.fromCharCode(i + start);\n    alphabetByEncoding[char] = i;\n    alphabetByValue[i] = char;\n}\nfor(let i = 0, start = \"a\".charCodeAt(0), limit = \"z\".charCodeAt(0); i + start <= limit; i++){\n    const char = String.fromCharCode(i + start);\n    const index = i + 26;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nfor(let i = 0; i < 10; i++){\n    alphabetByEncoding[i.toString(10)] = i + 52;\n    const char = i.toString(10);\n    const index = i + 52;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nalphabetByEncoding[\"-\"] = 62;\nalphabetByValue[62] = \"-\";\nalphabetByEncoding[\"_\"] = 63;\nalphabetByValue[63] = \"_\";\nvar bitsPerLetter = 6;\nvar bitsPerByte = 8;\nvar maxLetterValue = 63;\nvar stringToBuffer = (value)=>{\n    return new TextEncoder().encode(value);\n};\nvar bufferToString = (value)=>{\n    return new TextDecoder().decode(value);\n};\nvar base64urlDecode = (_input)=>{\n    const input = _input + \"=\".repeat((4 - _input.length % 4) % 4);\n    let totalByteLength = input.length / 4 * 3;\n    if (input.endsWith(\"==\")) {\n        totalByteLength -= 2;\n    } else if (input.endsWith(\"=\")) {\n        totalByteLength--;\n    }\n    const out = new ArrayBuffer(totalByteLength);\n    const dataView = new DataView(out);\n    for(let i = 0; i < input.length; i += 4){\n        let bits = 0;\n        let bitLength = 0;\n        for(let j = i, limit = i + 3; j <= limit; j++){\n            if (input[j] === \"=\") {\n                bits >>= bitsPerLetter;\n            } else {\n                if (!(input[j] in alphabetByEncoding)) {\n                    throw new TypeError(`Invalid character ${input[j]} in base64 string.`);\n                }\n                bits |= alphabetByEncoding[input[j]] << (limit - j) * bitsPerLetter;\n                bitLength += bitsPerLetter;\n            }\n        }\n        const chunkOffset = i / 4 * 3;\n        bits >>= bitLength % bitsPerByte;\n        const byteLength = Math.floor(bitLength / bitsPerByte);\n        for(let k = 0; k < byteLength; k++){\n            const offset = (byteLength - k - 1) * bitsPerByte;\n            dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);\n        }\n    }\n    return new Uint8Array(out);\n};\nvar base64urlEncode = (_input)=>{\n    const input = typeof _input === \"string\" ? stringToBuffer(_input) : _input;\n    let str = \"\";\n    for(let i = 0; i < input.length; i += 3){\n        let bits = 0;\n        let bitLength = 0;\n        for(let j = i, limit = Math.min(i + 3, input.length); j < limit; j++){\n            bits |= input[j] << (limit - j - 1) * bitsPerByte;\n            bitLength += bitsPerByte;\n        }\n        const bitClusterCount = Math.ceil(bitLength / bitsPerLetter);\n        bits <<= bitClusterCount * bitsPerLetter - bitLength;\n        for(let k = 1; k <= bitClusterCount; k++){\n            const offset = (bitClusterCount - k) * bitsPerLetter;\n            str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];\n        }\n    }\n    return str;\n};\n// src/index.ts\nvar defaults = {\n    encryption: {\n        saltBits: 256,\n        algorithm: \"aes-256-cbc\",\n        iterations: 1,\n        minPasswordlength: 32\n    },\n    integrity: {\n        saltBits: 256,\n        algorithm: \"sha256\",\n        iterations: 1,\n        minPasswordlength: 32\n    },\n    ttl: 0,\n    timestampSkewSec: 60,\n    localtimeOffsetMsec: 0\n};\nvar clone = (options)=>({\n        ...options,\n        encryption: {\n            ...options.encryption\n        },\n        integrity: {\n            ...options.integrity\n        }\n    });\nvar algorithms = {\n    \"aes-128-ctr\": {\n        keyBits: 128,\n        ivBits: 128,\n        name: \"AES-CTR\"\n    },\n    \"aes-256-cbc\": {\n        keyBits: 256,\n        ivBits: 128,\n        name: \"AES-CBC\"\n    },\n    sha256: {\n        keyBits: 256,\n        name: \"SHA-256\"\n    }\n};\nvar macFormatVersion = \"2\";\nvar macPrefix = \"Fe26.2\";\nvar randomBytes = (_crypto, size)=>{\n    const bytes = new Uint8Array(size);\n    _crypto.getRandomValues(bytes);\n    return bytes;\n};\nvar randomBits = (_crypto, bits)=>{\n    if (bits < 1) throw new Error(\"Invalid random bits count\");\n    const bytes = Math.ceil(bits / 8);\n    return randomBytes(_crypto, bytes);\n};\nvar pbkdf2 = async (_crypto, password, salt, iterations, keyLength, hash)=>{\n    const passwordBuffer = stringToBuffer(password);\n    const importedKey = await _crypto.subtle.importKey(\"raw\", passwordBuffer, {\n        name: \"PBKDF2\"\n    }, false, [\n        \"deriveBits\"\n    ]);\n    const saltBuffer = stringToBuffer(salt);\n    const params = {\n        name: \"PBKDF2\",\n        hash,\n        salt: saltBuffer,\n        iterations\n    };\n    const derivation = await _crypto.subtle.deriveBits(params, importedKey, keyLength * 8);\n    return derivation;\n};\nvar generateKey = async (_crypto, password, options)=>{\n    var _a;\n    if (!(password == null ? void 0 : password.length)) throw new Error(\"Empty password\");\n    if (options == null || typeof options !== \"object\") throw new Error(\"Bad options\");\n    if (!(options.algorithm in algorithms)) throw new Error(`Unknown algorithm: ${options.algorithm}`);\n    const algorithm = algorithms[options.algorithm];\n    const result = {};\n    const hmac = (_a = options.hmac) != null ? _a : false;\n    const id = hmac ? {\n        name: \"HMAC\",\n        hash: algorithm.name\n    } : {\n        name: algorithm.name\n    };\n    const usage = hmac ? [\n        \"sign\",\n        \"verify\"\n    ] : [\n        \"encrypt\",\n        \"decrypt\"\n    ];\n    if (typeof password === \"string\") {\n        if (password.length < options.minPasswordlength) throw new Error(`Password string too short (min ${options.minPasswordlength} characters required)`);\n        let { salt = \"\" } = options;\n        if (!salt) {\n            const { saltBits = 0 } = options;\n            if (!saltBits) throw new Error(\"Missing salt and saltBits options\");\n            const randomSalt = randomBits(_crypto, saltBits);\n            salt = [\n                ...new Uint8Array(randomSalt)\n            ].map((x)=>x.toString(16).padStart(2, \"0\")).join(\"\");\n        }\n        const derivedKey = await pbkdf2(_crypto, password, salt, options.iterations, algorithm.keyBits / 8, \"SHA-1\");\n        const importedEncryptionKey = await _crypto.subtle.importKey(\"raw\", derivedKey, id, false, usage);\n        result.key = importedEncryptionKey;\n        result.salt = salt;\n    } else {\n        if (password.length < algorithm.keyBits / 8) throw new Error(\"Key buffer (password) too small\");\n        result.key = await _crypto.subtle.importKey(\"raw\", password, id, false, usage);\n        result.salt = \"\";\n    }\n    if (options.iv) result.iv = options.iv;\n    else if (\"ivBits\" in algorithm) result.iv = randomBits(_crypto, algorithm.ivBits);\n    return result;\n};\nvar getEncryptParams = (algorithm, key, data)=>{\n    return [\n        algorithm === \"aes-128-ctr\" ? {\n            name: \"AES-CTR\",\n            counter: key.iv,\n            length: 128\n        } : {\n            name: \"AES-CBC\",\n            iv: key.iv\n        },\n        key.key,\n        typeof data === \"string\" ? stringToBuffer(data) : data\n    ];\n};\nvar encrypt = async (_crypto, password, options, data)=>{\n    const key = await generateKey(_crypto, password, options);\n    const encrypted = await _crypto.subtle.encrypt(...getEncryptParams(options.algorithm, key, data));\n    return {\n        encrypted: new Uint8Array(encrypted),\n        key\n    };\n};\nvar decrypt = async (_crypto, password, options, data)=>{\n    const key = await generateKey(_crypto, password, options);\n    const decrypted = await _crypto.subtle.decrypt(...getEncryptParams(options.algorithm, key, data));\n    return bufferToString(new Uint8Array(decrypted));\n};\nvar hmacWithPassword = async (_crypto, password, options, data)=>{\n    const key = await generateKey(_crypto, password, {\n        ...options,\n        hmac: true\n    });\n    const textBuffer = stringToBuffer(data);\n    const signed = await _crypto.subtle.sign({\n        name: \"HMAC\"\n    }, key.key, textBuffer);\n    const digest = base64urlEncode(new Uint8Array(signed));\n    return {\n        digest,\n        salt: key.salt\n    };\n};\nvar normalizePassword = (password)=>{\n    if (typeof password === \"string\" || password instanceof Uint8Array) return {\n        encryption: password,\n        integrity: password\n    };\n    if (\"secret\" in password) return {\n        id: password.id,\n        encryption: password.secret,\n        integrity: password.secret\n    };\n    return {\n        id: password.id,\n        encryption: password.encryption,\n        integrity: password.integrity\n    };\n};\nvar seal = async (_crypto, object, password, options)=>{\n    if (!password) throw new Error(\"Empty password\");\n    const opts = clone(options);\n    const now = Date.now() + (opts.localtimeOffsetMsec || 0);\n    const objectString = JSON.stringify(object);\n    const pass = normalizePassword(password);\n    const { id = \"\", encryption, integrity } = pass;\n    if (id && !/^\\w+$/.test(id)) throw new Error(\"Invalid password id\");\n    const { encrypted, key } = await encrypt(_crypto, encryption, opts.encryption, objectString);\n    const encryptedB64 = base64urlEncode(new Uint8Array(encrypted));\n    const iv = base64urlEncode(key.iv);\n    const expiration = opts.ttl ? now + opts.ttl : \"\";\n    const macBaseString = `${macPrefix}*${id}*${key.salt}*${iv}*${encryptedB64}*${expiration}`;\n    const mac = await hmacWithPassword(_crypto, integrity, opts.integrity, macBaseString);\n    const sealed = `${macBaseString}*${mac.salt}*${mac.digest}`;\n    return sealed;\n};\nvar fixedTimeComparison = (a, b)=>{\n    let mismatch = a.length === b.length ? 0 : 1;\n    if (mismatch) b = a;\n    for(let i = 0; i < a.length; i += 1)mismatch |= a.charCodeAt(i) ^ b.charCodeAt(i);\n    return mismatch === 0;\n};\nvar unseal = async (_crypto, sealed, password, options)=>{\n    if (!password) throw new Error(\"Empty password\");\n    const opts = clone(options);\n    const now = Date.now() + (opts.localtimeOffsetMsec || 0);\n    const parts = sealed.split(\"*\");\n    if (parts.length !== 8) throw new Error(\"Incorrect number of sealed components\");\n    const prefix = parts[0];\n    let passwordId = parts[1];\n    const encryptionSalt = parts[2];\n    const encryptionIv = parts[3];\n    const encryptedB64 = parts[4];\n    const expiration = parts[5];\n    const hmacSalt = parts[6];\n    const hmac = parts[7];\n    const macBaseString = `${prefix}*${passwordId}*${encryptionSalt}*${encryptionIv}*${encryptedB64}*${expiration}`;\n    if (macPrefix !== prefix) throw new Error(\"Wrong mac prefix\");\n    if (expiration) {\n        if (!/^\\d+$/.test(expiration)) throw new Error(\"Invalid expiration\");\n        const exp = Number.parseInt(expiration, 10);\n        if (exp <= now - opts.timestampSkewSec * 1e3) throw new Error(\"Expired seal\");\n    }\n    let pass = \"\";\n    passwordId = passwordId || \"default\";\n    if (typeof password === \"string\" || password instanceof Uint8Array) pass = password;\n    else if (passwordId in password) {\n        pass = password[passwordId];\n    } else {\n        throw new Error(`Cannot find password: ${passwordId}`);\n    }\n    pass = normalizePassword(pass);\n    const macOptions = opts.integrity;\n    macOptions.salt = hmacSalt;\n    const mac = await hmacWithPassword(_crypto, pass.integrity, macOptions, macBaseString);\n    if (!fixedTimeComparison(mac.digest, hmac)) throw new Error(\"Bad hmac value\");\n    const encrypted = base64urlDecode(encryptedB64);\n    const decryptOptions = opts.encryption;\n    decryptOptions.salt = encryptionSalt;\n    decryptOptions.iv = base64urlDecode(encryptionIv);\n    const decrypted = await decrypt(_crypto, pass.encryption, decryptOptions, encrypted);\n    if (decrypted) return JSON.parse(decrypted);\n    return null;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/iron-webcrypto/dist/index.js\n");

/***/ })

};
;